[
    struct Number {
        digit: byte,
        value: byte,
        scratch: byte,
    }

    numbers[index].digit   === memory[3 * index];
    numbers[index].value   === memory[3 * index + 1];
    numbers[index].scratch === memory[3 * index + 2];

    numbers[0] is LSB
    numbers[1] is MSB

    Block 1:
        // Start at index 0
        numbers[-1].digit = -1;
        numbers[0].digit = getchar() - '0';
        // End at index 0
    
    Block 2:
        // Start at index 0
        while (numbers[index].digit > 0) {
            numbers[index].value += 9;
            numbers[index].scratch += move(numbers[index].digit);
            (numbers[index].digit, numbers[index + 1].digit) += move(numbers[index].scratch)
            index += 1;
            numbers[index].digit -= 1;
        }
        // End at index n

    Block 3:
        // Start at index n
        index -= 1;
        while (numbers[index].digit + 1 > 0) {
            numbers[index + 1].scratch = 1;
            while (numbers[index + 1].scratch > 0) {
                numbers[index].scratch = move(numbers[index].value);
                if (numbers[index].scratch > 0) {
                    numbers[index].value = move(numbers[index].scratch);
                    numbers[index + 1].scratch = 0;
                }
                if (numbers[index + 1].scratch > 0) {
                    numbers[index].digit = 0;
                    index -= 1;
                    numbers[index + 1].scratch = 1;
                }
            }
            // End at index n-1

            Block 4:
                // Start at index n-1
                while (numbers[index].digit > 0) {
                    numbers[index].scratch = 0;
                    numbers[index - 1].scratch = 0;
                    numbers[index - 1].scratch += move(numbers[index].value);
                    (numbers[index].value, numbers[index].scratch) += move(numbers[index - 1].scratch);

                    numbers[index].scratch += '0';
                    print(numbers[index].scratch);
                    index -= 1;
                }
                numbers[index].scratch = '\n';
                print(numbers[index].scratch);
                // End at index -1

            Block 5:
                // Start at index -1
                index += 1;
                numbers[index].scratch = 1;
                while (numbers[index].digit > 0) {
                    numbers[index + 1].scratch = 0;
                    if (numbers[index].scratch > 0) {
                        numbers[index + 1].scratch += 1;
                        numbers[index].scratch = move(numbers[index].value);
                        numbers[index].value += 9;
                        if (numbers[index].scratch > 0) {
                            numbers[index + 1].scratch -= 1;
                            numbers[index].value = -1;
                            numbers[index].value += move(numbers[index].scratch);
                        }
                        numbers[index].scratch = 0;
                    }
                    index += 1;
                }
                // End at index n

        }



    [-]
    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++.-------------------------------------------------------------------------------------------

    ++++++++++++++++++++++++++++++++++++++++++++++++.------------------------------------------------
    >
    ++++++++++++++++++++++++++++++++++++++++++++++++.------------------------------------------------
    >
    ++++++++++++++++++++++++++++++++++++++++++++++++.------------------------------------------------
    <<

    [-]
    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++.---------------------------------------------------------------------------------------------

]


1:
,------------------------------------------------


2:
[
    >+++++++++<
    [->>+<<]
    >>[-<<+>>>+<]
    >-
]

3:
<<<
+[-
0   >>>>>[-]+
5   [
5       <<<[-]<[->+<]
1       >[
2           [-<+>]
2           >>>-
5       <<<]
2       >>>[
5           <<<<<[-]
3       TODO
7       ]
2   ]
    
    TODO
    Block 3:
        // Start at index n
        index -= 1;
        while (numbers[index].digit + 1 > 0) {
            numbers[index + 1].scratch = 1;
            while (numbers[index + 1].scratch > 0) {
                numbers[index].scratch = move(numbers[index].value);
                if (numbers[index].scratch > 0) {
                    numbers[index].value = move(numbers[index].scratch);
                    numbers[index + 1].scratch = 0;
                }
                if (numbers[index + 1].scratch > 0) {
                    numbers[index].digit = 0;
                    index -= 1;
                    numbers[index + 1].scratch = 1;
                }
            }
            // End at index n-1

    4:
    [
        >>[-]
        <<<[-]
        >>[-<<+>>]
        <<[->>+>+<<<]

        >>>++++++++++++++++++++++++++++++++++++++++++++++++
        .
        <<<<<
    ]
    >>[-]++++++++++.<<

    5:
    >>>
    >>[-]+<<
    [
        >>>>>[-]
        <<<[
            >>>+
            <<<-<[->+<]
            +++++++++
            >[
                >>>-
                <<<<[-]-
                >[-<+>]
            ]
            [-]
        ]
        >
    ]
]
